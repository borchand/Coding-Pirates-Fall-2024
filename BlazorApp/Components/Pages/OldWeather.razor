@using Newtonsoft.Json
@using BlazorApp.Models

@page "/oldweather"
@attribute [StreamRendering]
@inject IJSRuntime JSRuntime

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<div class="section">
    <div class="row">
        <div class="col">
            <div id="map" style="height:400px;width:100%;"></div>
        </div>
        <div class="col"></div>
    </div>
</div>


@if (Model == null || Model?.HourlyData == null || Model?.HourlyData.Time == null){
    <p><em>Loading...</em></p>
}
else{
    <table class="table">
        <thead>
            <tr>
                <th>Time</th>
                <th>Temperature 2m</th>
                <th>Apparent Temperature</th>
                <th>Precipitation Probability</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.HourlyData.Time.Length; i++)
            {
                <tr>
                    <td>@Model.HourlyData.Time[i].Split("T")[1]</td>
                    <td>@Model.HourlyData.Temperature2m[i] @Model.HourlyUnits.Temperature2m</td>
                    <td>@Model.HourlyData.ApparentTemperature[i] @Model.HourlyUnits.ApparentTemperature</td>
                    <td>@Model.HourlyData.PrecipitationProbability[i] @Model.HourlyUnits.PrecipitationProbability</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private DotNetObjectReference<OldWeather>? dotNetHelper;

    private WeatherData? Model;

    private string _connectionString = "https://api.open-meteo.com/v1/";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("mapsHelpers.setDotNetHelper", dotNetHelper);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetLiveData();
    }

    private async Task GetLiveData()
    {
        using (var client = new HttpClient())
        {
            client.BaseAddress = new Uri(_connectionString);
            client.DefaultRequestHeaders.Accept.Clear();

            var lat = 55.67;
            var lon = 12.56;
            var url = $"forecast?latitude={lat}&longitude={lon}&hourly=temperature_2m,apparent_temperature,precipitation_probability&forecast_days=1";

            HttpResponseMessage response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var apiData = await response.Content.ReadAsStringAsync();
                var Model = JsonConvert.DeserializeObject<WeatherData>(apiData);
            }
        }
    }
}

